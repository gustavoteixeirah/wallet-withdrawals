plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5' // Assuming this version, adjust if needed
    id 'io.spring.dependency-management' version '1.1.7' // Assuming this version, adjust if needed
    id 'org.jooq.jooq-codegen-gradle' version '3.20.6'
}

group = 'com.teixeirah.withdrawals'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

ext {
    jooqVersion = '3.20.6'
    resilience4jVersion = '2.2.0' // Make sure this is only defined once
    testcontainersVersion = "1.19.8"
    restAssuredVersion = "5.5.0"
    awaitilityVersion = "4.2.1"
    wiremockVersion = "3.9.1" // Add wiremock version
    wiremockTestcontainersModuleVersion = "1.0-alpha-13" // Add wiremock TC module version
}

repositories {
    mavenCentral()
}

dependencies {
    // Project dependencies
    implementation project(':domain')
    implementation project(':application')

    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    implementation 'org.springframework.boot:spring-boot-starter-webflux' // For WebClient
    implementation 'org.springframework.boot:spring-boot-starter-actuator' // Good practice

    // Resilience4j
    implementation "io.github.resilience4j:resilience4j-spring-boot3:${resilience4jVersion}"
    implementation "io.github.resilience4j:resilience4j-reactor:${resilience4jVersion}"

    // jOOQ & Database
    implementation "org.jooq:jooq:${jooqVersion}"
    jooqCodegen "org.jooq:jooq-meta:${jooqVersion}"
    jooqCodegen "org.jooq:jooq-codegen:${jooqVersion}"
    jooqCodegen "org.jooq:jooq-meta-extensions:${jooqVersion}"
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'
    runtimeOnly 'org.postgresql:postgresql'

    // Utilities
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    // --- Testing (Unit & Integration) ---
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers' // Manages ServiceConnection

    // --- Testcontainers ---
    testImplementation platform("org.testcontainers:testcontainers-bom:${testcontainersVersion}") // BOM
    testImplementation 'org.testcontainers:testcontainers'          // Core library
    testImplementation 'org.testcontainers:junit-jupiter'           // JUnit 5 support
    testImplementation 'org.testcontainers:postgresql'            // PostgreSQL container

    // --- WireMock Dependencies (Corrected) ---
    // Testcontainers module for WireMock
    testImplementation "org.wiremock.integrations.testcontainers:wiremock-testcontainers-module:${wiremockTestcontainersModuleVersion}"
    // Main WireMock library (needed for stubbing API: WireMock.aResponse(), etc.)
    testImplementation "org.wiremock:wiremock:${wiremockVersion}"


    // --- HTTP & Async Test Utilities ---
    testImplementation "io.rest-assured:rest-assured:${restAssuredVersion}"       // For HTTP API testing
    testImplementation "org.awaitility:awaitility:${awaitilityVersion}"          // For async testing (Sagas)
}


dependencyManagement {
    imports {
        // Manage Resilience4j versions centrally
        mavenBom "io.github.resilience4j:resilience4j-bom:${resilience4jVersion}"
    }
}

test {
    useJUnitPlatform()
}

// Ensure jOOQ generated code is compiled
tasks.named("compileJava") {
    dependsOn(tasks.named("jooqCodegen"))
}

sourceSets {
    main {
        java {
            srcDir "build/generated-sources/jooq"
        }
    }
}

// jOOQ Codegen Configuration
jooq {
    configuration {
        generator {
            database {
                name = "org.jooq.meta.extensions.ddl.DDLDatabase"
                properties {
                    property { key = "scripts"; value = "src/main/resources/db/migration/*.sql" }
                    property { key = "sort"; value = "flyway" }
                    property { key = "unqualifiedSchema"; value = "none" }
                    property { key = "defaultNameCase"; value = "as_is" }
                }
            }
            // Add other generator configurations if needed (target package, etc.)
            target {
                packageName = 'org.jooq.generated' // Example, adjust as needed
                directory = 'build/generated-sources/jooq'
            }
            generate {
                // Add generation options if needed
            }
        }
    }
}